
var audio = {
    updateMenu: function(player) {
        if (audio.getButton()) {
        	// on doit retirer toutes les langues pour recharger les nouvelles
        	while (audio.getMenu().firstChild) {
        		audio.getMenu().removeChild(audio.getMenu().firstChild);
        		}
            audio.fillMenu();
        } else {
            var Button = THEOplayer.videojs.getComponent('Component');
            var MyButton = THEOplayer.videojs.extend(Button, {
                constructor : function () {
                    Button.apply(this, arguments);
                    this.el().className = 'languagebutton vjs-control vjs-button';
                    var currentLanguageSpan = document.createElement('span');
                    currentLanguageSpan.className = "currentLanguage";
                    currentLanguageSpan.innerText = (SITELANG && possibleLanguages[SITELANG.toLowerCase()]) || "Original";
                    this.el().addEventListener('click', function() {
                        audio.getMenu().classList.toggle('hidden');
                        audio.getMenu().style.top = (audio.getMenu().offsetHeight*-1) + "px";
                    });
                    var tooltip = document.createElement('span');
                    tooltip.className = "theo-button-tooltip";
                    tooltip.innerText = "Languages";
                    this.el().appendChild(tooltip);
                    this.el().appendChild(currentLanguageSpan);

                }
            });
            THEOplayer.videojs.registerComponent('MyButton', MyButton);
            player.ui.getChild('controlBar').addChild('myButton', {});
            var divLanguagesMenu = document.createElement('div');
            divLanguagesMenu.className = "menu hidden";

            audio.getButton().appendChild(divLanguagesMenu);

            audio.fillMenu(divLanguagesMenu);

        }
    },
    getMenu: function() {
        return document.querySelector('.languagebutton .menu');
    },
    getButton: function() {
        return document.querySelector('.languagebutton');
    },
    fillMenu: function(menu) {
        var divLanguagesMenu = menu || audio.getMenu();
        var langs = audio.getLangs();

        var shareLanguagesRow = document.querySelector('.share .lgrow');
        var shareLanguagesSelect = shareLanguagesRow.querySelector('select');
        var embedLanguagesRow = document.querySelector('.embed .lgrow');
        var embedLanguagesSelect = embedLanguagesRow.querySelector('select');
        shareLanguagesSelect.innerHTML = '';
        embedLanguagesSelect.innerHTML = '';
        shareLanguagesRow.style.display = "block";
        embedLanguagesRow.style.display = "block";
        for (var i = 0; i < langs.length; i++) {

            var langFull = (isLive) ? (possibleLanguages[langs[i].toLowerCase()]) : langs[i].lglabel;
            var langValue = (isLive) ? langs[i].toLowerCase() : langs[i].lg;

            // share
            var optionElL = document.createElement('option');
            optionElL.innerText = langFull;
            optionElL.value = langValue;
            shareLanguagesSelect.appendChild(optionElL);

            // embed
            var optionElL = document.createElement('option');
            optionElL.innerText = langFull;
            optionElL.value = langValue;
            embedLanguagesSelect.appendChild(optionElL);
        }

        var prefLang = (SITELANG && langs.indexOf(SITELANG.toUpperCase())) || -1;
        if (langs.length != currentLangs) {
            for (var i = 0; i < langs.length; i++) {
                var divLang = document.createElement('div');
                var className = "lang"+i;
                divLang.className = className;
                if (langs[i] && langs[i].lglabel) {
                    divLang.innerHTML = langs[i].lglabel;
                    divLang.dataset.lg = langs[i].lg;
                } else {
                    var langFull = (isLive) ? (possibleLanguages[langs[i].toLowerCase()]) : langs[i].lglabel;
                    var langValue = (isLive) ? langs[i].toLowerCase() : langs[i].lg;
                    divLang.innerHTML = langFull;
                    divLang.dataset.lg = langValue;
                }

                divLang.addEventListener('click', audio.menuItemClickHandler);
                if ((prefLang == -1) && i == 0) {
                    divLang.className = "selected";
                } else if (i == prefLang) {
                    divLang.className = "selected";
                }
                divLanguagesMenu.appendChild(divLang);

            }
        }
        currentLangs = 0;
    },
    menuItemClickHandler: function(event) {
        if (event.target && event.target.dataset.lg) {
            if (isLive) {
                var plus = (CHANNEL == 2) ? "plus" : "";
                var isPaused = player.paused;
                player.src = "//ott.ec.streamcloud.be/live/disk1/EBS"+plus+"/hls_" + event.target.dataset.lg + "/EBS"+plus+".m3u8";
                if (!isPaused) {
                    player.play();
                }
            } else {
                var currentTime = player.currentTime;
                var isPaused = player.paused;
                // player.src = stream.vod.getLangStreamWhenVOD(event.target.dataset.lg);
                player.source = stream.vod.getSource(event.target.dataset.lg);
                player.currentTime = currentTime;
                if (!isPaused) {
                    player.play();
                }
            }
            var language = event.target.innerText;
            var selectableLanguages = event.target.parentNode.children;
            for (var i = 0; i < selectableLanguages.length; i++) {
                selectableLanguages[i].classList.remove('selected');
            }
            event.target.classList.add('selected');
            document.querySelector('.languagebutton .currentLanguage').innerText = language;
        }
    },
    getLangs: function() {
        if (isLive) {
        	console.log('lang',stream.info.langs);
            return stream.info.langs.split(" ");
        } else {
            return audio.processLangs(stream.info);
        }
    },
    processLangs: function(data) {
        if (data.medias) {
            var langs = data.medias.map(function (e) {
                return {lg: e.lg, lglabel: e.lglabel}
            });
            return langs;
        }
        return null;
    }

};

var subtitles = {
    updateMenu: function(player) {
        if (stream.info.subtitles && stream.info.subtitles.length > 0) {
            if (subtitles.getButton()) {
                subtitles.fillMenu();
            } else {
                var Button = THEOplayer.videojs.getComponent('Component');
                var MyButton = THEOplayer.videojs.extend(Button, {
                    constructor : function () {
                        Button.apply(this, arguments);
                        this.el().className = 'subtitlebutton vjs-control vjs-button';
                        this.el().addEventListener('click', function () {
                            subtitles.getMenu().classList.toggle('hidden');
                            subtitles.getMenu().style.top = (subtitles.getMenu().offsetHeight * -1) + "px";
                        });
                        var tooltip = document.createElement('span');
                        tooltip.className = "theo-button-tooltip";
                        tooltip.innerText = "Subtitles";
                        this.el().appendChild(tooltip);
                    }
                });
                THEOplayer.videojs.registerComponent('MyButton', MyButton);
                player.ui.getChild('controlBar').addChild('myButton', {});
                var divSubtitleMenu = document.createElement('div');
                divSubtitleMenu.className = "menu hidden";

                subtitles.getButton().appendChild(divSubtitleMenu);

                subtitles.fillMenu(divSubtitleMenu);
            }
        } else {
            // if button there
            // destroy
            // else
            // do nothing
        }
    },
    getMenu: function() {
        return document.querySelector('.subtitlebutton .menu');
    },
    getButton: function() {
        return document.querySelector('.subtitlebutton');
    },
    fillMenu: function(menu) {
        var divSubtitleMenu = menu || subtitles.getMenu();

        var subs = stream.info.subtitles.map(function(e){return e.lglabel});

        var shareSubtitlesRow = document.querySelector('.share .subrow');
        var shareSubtitlesSelect = shareSubtitlesRow.querySelector('select');
        var embedSubtitlesRow = document.querySelector('.embed .subrow');
        var embedSubtitlesSelect = embedSubtitlesRow.querySelector('select');
        shareSubtitlesSelect.innerHTML = '<option data-lg="none">None</option>';
        embedSubtitlesSelect.innerHTML = '<option data-lg="none">None</option>';
        shareSubtitlesRow.style.display = "block";
        embedSubtitlesRow.style.display = "block";

        for (var i = 0; i < subs.length; i++) {
            var divSub = document.createElement('div');
            var className = "lang"+i;
            divSub.className = className;
            var sub = subs[i];
            divSub.innerHTML = sub;
            divSub.dataset.lg = i;
            divSub.addEventListener('click', subtitles.menuItemClickHandler);
            divSubtitleMenu.appendChild(divSub);
            if (SUBLG === stream.info.subtitles[i].lg) {
                divSub.classList.add('selected');
            }

            // share
            var optionElS = document.createElement('option');
            optionElS.innerText = sub;
            optionElS.value = stream.info.subtitles[i].lg;
            shareSubtitlesSelect.appendChild(optionElS);

            // embed
            var optionElE = document.createElement('option');
            optionElE.innerText = sub;
            optionElE.value = stream.info.subtitles[i].lg;
            embedSubtitlesSelect.appendChild(optionElE);
        }
        currentSubsLength = subtitles.length;

    },
    menuItemClickHandler: function(event) {
        if (event.target && event.target.dataset.lg) {
            player.textTracks.map(function(e){e.mode = "disabled"});
            player.textTracks[event.target.dataset.lg].mode = "showing";
            selectedSubtitle = event.target.dataset.lg;
            var selectableLanguages = event.target.parentNode.children;
            for (var i = 0; i < selectableLanguages.length; i++) {
                selectableLanguages[i].classList.remove('selected');
            }
            event.target.classList.add('selected');
        }
    }
};
var currentLangs = 0;
var currentSubsLength = 0;
var selectedSubtitle;

var shotlist = {
    updateMenu: function(player) {
        if (shotlist.getButton()) {
            shotlist.fillMenu();
        } else {
            if (!isLive) { // CHECK SHOTLIST IF IS NOT A LIVE //////////////
				var Button = THEOplayer.videojs.getComponent('Component');
				var MyButton = THEOplayer.videojs.extend(Button, {
					constructor : function () {
						Button.apply(this, arguments);
						this.el().className = 'shotlistbutton vjs-control vjs-button hidden';
						this.el().addEventListener('click', function () {
							document.querySelector('.shotlist-container').classList.toggle('hidden');
						});
						var tooltip = document.createElement('span');
						tooltip.className = "theo-button-tooltip";
						tooltip.innerText = "Shotlist";
						this.el().appendChild(tooltip);
					}
				});
				THEOplayer.videojs.registerComponent('MyButton', MyButton);
				player.ui.getChild('controlBar').addChild('myButton', {});
				$.getJSON(stream.info.shotlistURL+"?ref="+REF).then(function(shotlistData) {
					if (shotlistData.shotlist && shotlistData.shotlist.length > 0) {
						document.querySelector('.shotlistbutton').classList.remove('hidden');
						stream.info.shotlist = shotlistData.shotlist;
						player.addEventListener('timeupdate', shotlist.handler);
					}
				}, function (reject2) {
					console.log("Shotlist not called.")
				});
			} 
        }
    },
    getMenu: function() {
        return document.querySelector('.subtitlebutton .menu');
    },
    getButton: function() {
        return document.querySelector('.subtitlebutton');
    },
    fillMenu: function(menu) {
        if (stream.info.shotlist && stream.info.shotlist.length > 0) {
            console.log(stream.info.shotlist)
        }
    },
    menuItemClickHandler: function(event) {

    },
    handler: function(e) {
        var shotlist_ = stream.info.shotlist;
        if (shotlist_ && shotlist_.length > 0) {
            var shotlistContainerP = document.querySelector('.shotlist-container p');
            var txt = "";
            for (var i = shotlist_.length - 1; i >= 0; i--) {
                var shot = shotlist_[i];
                if (player.currentTime > shot.timestamp) {
                    txt = shot.label;
                    break;
                }
            }
            if (txt != shotlist.currentText) {
                shotlist.currentText = txt;
                shotlistContainerP.innerHTML = txt;

            }
        }
    },
    currentText: ""
}

